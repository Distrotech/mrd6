-include Makefile.options

CC ?= gcc
CXX ?= g++

PLATFORM ?= OS_LINUX
SUPPORT_MODULES ?= yes
TARGET ?= mrd
PREFIX ?= /usr/local
STATIC_STDCXX ?= no
FULL_STATIC ?= no
NO_INLINE ?= no
NO_INET6_OPTION ?= no

GENERATED_MODULE_LIST ?= no

ifeq ($(FULL_STATIC),yes)
	SUPPORT_MODULES = no
endif

ifeq ($(SUPPORT_MODULES),yes)
	EXTERNAL_MODULES ?= bgp.so
endif

INCLUDES = -I../include

NOW = $(shell date -u)

CFLAGS += -ansi -Wall -Wno-multichar

MLD_SOURCES = mld/mld_def.cpp mld/mld_router.cpp mld/mld_conf.cpp mld/mld_module.cpp
PIM_SOURCES = pim/pim_def.cpp pim/pim_router.cpp pim/pim_interface.cpp \
	      pim/pim_group.cpp pim/pim_source.cpp pim/pim_oif.cpp \
	      pim/pim_neighbour.cpp pim/pim_conf.cpp pim/pim_bsr.cpp \
	      pim/pim_module.cpp
CONSOLE_SOURCES = console/console.cpp console/telnet_console.cpp \
		  console/unix_console.cpp
BGP_SOURCES = bgp/bgp.cpp bgp/bgp_def.cpp
MSNIP_SOURCES = msnip/msnip_module.cpp
MRDISC_SOURCES = mrdisc/mrdisc_module.cpp
RIPNG_SOURCES = ripng/ripng.cpp
ZEBRA_SOURCES = zebra/zebra.cpp

MLD_EXT_SOURCES = mld/mld_def.cpp mld/mld_router.cpp mld/mld_conf.cpp extra/mld_ext.cpp

TESTS = tests/ptree_unittest tests/mrib_unittest

ifeq ($(NO_INET6_OPTION),yes)
	CFLAGS += -DNO_INET6_OPTION
endif

DEST_PREFIX = $(DESTDIR)$(PREFIX)

ifeq ($(OPTIMIZE),yes)
	ifeq ($(SPACE_OPTIMIZE),yes)
		CFLAGS += -O3 -Os
	else
		CFLAGS += -O3
	endif
else
	CFLAGS += -g
	ifeq ($(NO_INLINE),yes)
		CFLAGS += -O0 -fno-inline
	else
		CFLAGS += -O2
	endif
endif

MRD_CXXFLAGS = -fno-exceptions -fPIC -D$(PLATFORM)

MODULE_OPTIONS_CXXFLAGS = $(addprefix -D,$(MODULE_OPTIONS))

CXXFLAGS = $(INCLUDES) $(CFLAGS) $(MRD_CXXFLAGS) $(MODULE_OPTIONS_CXXFLAGS)

MLD_OBJECTS = $(MLD_SOURCES:.cpp=.o)
PIM_OBJECTS = $(PIM_SOURCES:.cpp=.o)
CONSOLE_OBJECTS = $(CONSOLE_SOURCES:.cpp=.o)
BGP_OBJECTS = $(BGP_SOURCES:.cpp=.o)
MSNIP_OBJECTS = $(MSNIP_SOURCES:.cpp=.o)
MRDISC_OBJECTS = $(MRDISC_SOURCES:.cpp=.o)
RIPNG_OBJECTS = $(RIPNG_SOURCES:.cpp=.o)
ZEBRA_OBJECTS = $(ZEBRA_SOURCES:.cpp=.o)

MLD_EXT_OBJECTS = $(MLD_EXT_SOURCES:.cpp=.o)

STATIC_MODULES_CPP = modules.cpp

ifeq ($(GENERATED_MODULE_LIST),no)
	CXXFLAGS += -DMRD_STATIC_MLD -DMRD_STATIC_PIM -DMRD_STATIC_CONSOLE
	STATIC_MODULE_SOURCES = $(MLD_SOURCES) $(PIM_SOURCES) $(CONSOLE_SOURCES)
else
	STATIC_MODULES_CPP = modules.generated.cpp
endif

ifneq ($(SUPPORT_MODULES),yes)
	CXXFLAGS += -DMRD_NO_DYNAMIC_MODULE_LOADING
endif

ifeq ($(FULL_STATIC),yes)
	LDCMD = -static
else
	ifeq ($(SUPPORT_MODULES),yes)
		LDCMD = -rdynamic
	endif
endif

LDFLAGS += -lm
ifeq ($(PLATFORM),OS_LINUX)
	LDFLAGS += -ldl
endif

ifeq ($(STATIC_STDCXX),no)
	LDFLAGS += -lstdc++
else
	LDFLAGS += `$(CXX) -print-file-name=libstdc++.a`
endif

LINUX_SOURCES = linux/us_mfa.cpp linux/linux_icmp_raw.cpp \
		linux/linux_unicast_route.cpp linux/mrd_components.cpp

BSD_SOURCES = bsd/bsd_rib.cpp bsd/bsd_mfa.cpp bsd/mrd_components.cpp

SOURCES = address.cpp address_set.cpp group.cpp icmp_inet6.cpp icmp.cpp \
	  interface.cpp log.cpp mfa.cpp mrd.cpp mrib.cpp node.cpp \
	  parser.cpp rib.cpp router.cpp timers.cpp support/objpool.cpp \
	  support/ptree.cpp

ifeq ($(PLATFORM),OS_LINUX)
	SOURCES += $(LINUX_SOURCES)
endif

ifeq ($(PLATFORM),OS_BSD)
	SOURCES += $(BSD_SOURCES)
endif

MRD_VERSION_CPP = mrd.version.cpp

TEST_SOURCES = $(SOURCES) $(MRD_VERSION_CPP) no-modules.cpp
TEST_OBJECTS = $(TEST_SOURCES:.cpp=.o)

MRD_SOURCES = $(SOURCES) main.cpp $(STATIC_MODULES_CPP) \
	      $(STATIC_MODULE_SOURCES) $(MRD_VERSION_CPP)

ALL_SOURCES = $(MRD_SOURCES)

ifneq (,$(findstring mld.so,$(EXTERNAL_MODULES)))
	ALL_SOURCES += $(MLD_SOURCES)
endif

ifneq (,$(findstring pim.so,$(EXTERNAL_MODULES)))
	ALL_SOURCES += $(PIM_SOURCES)
endif

ifneq (,$(findstring console.so,$(EXTERNAL_MODULES)))
	ALL_SOURCES += $(CONSOLE_SOURCES)
endif

ifneq (,$(findstring bgp.so,$(EXTERNAL_MODULES)))
	ALL_SOURCES += $(BGP_SOURCES)
endif

ifneq (,$(findstring msnip.so,$(EXTERNAL_MODULES)))
	ALL_SOURCES += $(MSNIP_SOURCES)
endif

ifneq (,$(findstring mrdisc.so,$(EXTERNAL_MODULES)))
	ALL_SOURCES += $(MRDISC_SOURCES)
endif

ifneq (,$(findstring ripng.so,$(EXTERNAL_MODULES)))
	ALL_SOURCES += $(RIPNG_SOURCES)
endif

ifneq (,$(findstring zebra.so,$(EXTERNAL_MODULES)))
	ALL_SOURCES += $(ZEBRA_SOURCES)
endif

MRD_OBJECTS = $(MRD_SOURCES:.cpp=.o)

MODULE_CXX = $(CXX) -shared $(CXXFLAGS)

all: $(TARGET) $(EXTERNAL_MODULES)

$(TARGET): $(OBJECTS) $(MRD_OBJECTS)
	@echo "Linking $(TARGET)"
	@$(CXX) $(LDCMD) $(CXXFLAGS) -o $@ $(MRD_OBJECTS) $(LDFLAGS)

install: $(TARGET) $(EXTERNAL_MODULES)
	install -D $(TARGET) $(DEST_PREFIX)/sbin/$(TARGET)
	install -D ../tools/mrd6sh $(DEST_PREFIX)/bin/mrd6sh
ifdef EXTERNAL_MODULES
	mkdir -p $(DEST_PREFIX)/lib/mrd6/
	install -D $(EXTERNAL_MODULES) $(DEST_PREFIX)/lib/mrd6/
endif

$(MRD_VERSION_CPP): $(SOURCES) Makefile
	@echo '/* This file is automatically generated */' > $(MRD_VERSION_CPP)
	@echo 'const char *BuildDate = "$(NOW)";' >> $(MRD_VERSION_CPP)

mld.so: $(MLD_OBJECTS)
	@echo "Module $@"
	@$(MODULE_CXX) -o $@ $+

pim.so: $(PIM_OBJECTS)
	@echo "Module $@"
	@$(MODULE_CXX) -o $@ $+

console.so: $(CONSOLE_OBJECTS)
	@echo "Module $@"
	@$(MODULE_CXX) -o $@ $+

bgp.so: $(BGP_OBJECTS)
	@echo "Module $@"
	@$(MODULE_CXX) -o $@ $+

msnip.so: $(MSNIP_OBJECTS)
	@echo "Module $@"
	@$(MODULE_CXX) -o $@ $+

mrdisc.so: $(MRDISC_OBJECTS)
	@echo "Module $@"
	@$(MODULE_CXX) -o $@ $+

ripng.so: $(RIPNG_OBJECTS)
	@echo "Module $@"
	@$(MODULE_CXX) -o $@ $+

zebra.so: $(ZEBRA_OBJECTS)
	@echo "Module $@"
	@$(MODULE_CXX) -o $@ $+

mld_ext.so: $(MLD_EXT_OBJECTS)
	@echo "Module $@"
	@$(MODULE_CXX) -o $@ $+

tests/ptree_unittest: $(TEST_OBJECTS)
	@echo "Linking ptree_unittest"
	@$(CXX) $(LDCMD) $(CXXFLAGS) -o $@ tests/ptree_unittest.cpp \
		$(TEST_OBJECTS) $(LDFLAGS) -lboost_unit_test_framework

tests/mrib_unittest: $(TEST_OBJECTS)
	@echo "Linking mrib_unittest"
	@$(CXX) $(LDCMD) $(CXXFLAGS) -o $@ tests/mrib_unittest.cpp \
		$(TEST_OBJECTS) $(LDFLAGS) -lboost_unit_test_framework

.PHONY: tests
tests: $(TESTS)

OPTIONS = Makefile.options

$(OPTIONS):
	@touch $@

.deps/%.d: %.cpp $(OPTIONS)
	@echo "Deps $<"
	@set -e; mkdir -p $(dir $@); \
	$(CXX) -MM -MT $@ -MT $(<:.cpp=.o) $(CXXFLAGS) $< > $@

DEPENDENCIES = $(addprefix .deps/,$(ALL_SOURCES:.cpp=.d))

ifneq ($(MAKECMDGOALS),clean)
	-include $(DEPENDENCIES)
endif

%.o: %.cpp $(OPTIONS)
	@echo "C++ $<"
	@$(CXX) -c $(CXXFLAGS) $< -o $@

clean:
	rm -rf .deps $(TARGET) $(MRD_OBJECTS) \
		$(MLD_OBJECTS) $(PIM_OBJECTS) $(CONSOLE_OBJECTS) \
		$(BGP_OBJECTS) $(MSNIP_OBJECTS) $(MRDISC_OBJECTS) \
		$(RIPNG_OBJECTS) $(ZEBRA_OBJECTS) \
		$(EXTERNAL_MODULES) $(MRD_VERSION_CPP) \
		$(TESTS)

.PHONY: install clean

